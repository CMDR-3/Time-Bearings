plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.mod_id
}
//
//sourceSets {
//	main {
//		resources {
//			srcDirs += [
//					'src/main/generated'
//			]
//		}
//	}
//}
//
//loom {
//
//	// ... (Whatever exists here)
//
//	runs {
//		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
//		datagen {
//			inherit server
//			name "Data Generation"
//			vmArg "-Dfabric-api.datagen"
//			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
//			vmArg "-Dfabric-api.datagen.modid=${mod_id}"
//
//			runDir "build/datagen"
//		}
//	}
//}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	// the repository for iPortal
	maven { url 'https://jitpack.io' }

// the repository for Cloth Config
	maven { url 'https://maven.shedaniel.me' }
	maven {
		// location of the maven that hosts JEI files since January 2023
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
	}
	maven {
		// location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.dev"
	}
	exclusiveContent {
		forRepository {
			maven {
				url "https://cursemaven.com"
			}
		}
		filter {
			includeGroup "curse.maven"
		}
	}
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
}

fabricApi {
	configureDataGeneration()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
	}

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Optional Dependencies
	// compile against the JEI API but do not include it at runtime
	modCompileOnlyApi "mezz.jei:jei-${project.minecraft_version}-common-api:${project.jei_version}"
	modCompileOnlyApi "mezz.jei:jei-${project.minecraft_version}-fabric-api:${project.jei_version}"

	modImplementation "com.github.iPortalTeam.ImmersivePortalsMod:imm_ptl_core:v${project.immersive_version}-mc${project.minecraft_version}"
	modImplementation "com.github.iPortalTeam.ImmersivePortalsMod:q_misc_util:v${project.immersive_version}-mc${project.minecraft_version}"
	modImplementation "com.github.iPortalTeam.ImmersivePortalsMod:build:v${project.immersive_version}-mc${project.minecraft_version}"

	// Runtime Dependencies
	modRuntimeOnly "mezz.jei:jei-${project.minecraft_version}-fabric:${project.jei_version}"
	modRuntimeOnly "maven.modrinth:sodium:${project.sodium_version}"
	//modRuntimeOnly "curse.maven:iris-455508:${project.iris_version}"
	modRuntimeOnly "curse.maven:iris-455508:${project.iris_version}"

	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

def resourceTargets = ['fabric.mod.json']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [
		mod_id                 : mod_id,
		mod_version: mod_version,
		minecraft_version      : minecraft_version,
		loader_version: loader_version,
		fabric_version     : fabric_version,
		java_version : java_version
		]

processResources {
	inputs.properties replaceProperties
	replaceProperties.put 'project', project

	filesMatching(resourceTargets) {
		expand replaceProperties
	}

	intoTargets.each { target ->
		if (file(target).exists()) {
			copy {
				from(sourceSets.main.resources) {
					include resourceTargets
					expand replaceProperties
				}
				into target
			}
		}
	}

}


tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}